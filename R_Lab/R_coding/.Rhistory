admit3
admit3$Admit
admit.rows <- as.data.frame(lapply(as.data.frame(UCBAdmissions), function(x)rep(x, as.data.frame(UCBAdmissions)$Freq)))[ , -4]
str(admit.rows)
admit.rows[,3]
rm(list = ls())
##### colors
x1 <- scan()
?colors
colors()
col2rgb("gold2")
?palette
palette()
require(RColorBrewer)
x1
barplot(x1, col = )
install.packages("RColorBrewer")
display.brewer.pal(6, "Gold")
greens <- brewer.pal(6, "Greens")
greens
barplot(x1, col = brewer.pal(6, "Paired"))
gold <- col = "gold"
install.packages("RColorBrewer")
barplot(x1, col = brewer.pal(6, "Paired"))
admit.rows[,3]
?UCBAdmissions
UCBAdmissions$gender
str(UCBAdmissions)
plot(UCBAdmissions)
margin.table(UCBAdmissions)
?margin.table
admit.dept <- margin.table(UCBAdmissions, 3)# new table for admit data
admit_gendr <- margin.table(UCBAdmissions, 2)
barplot(admit_dept)
barplot(admit_gendr)
admit_dept
prop.table(admit.dept)
barplot(round(prop.table(admit.dept), 2)*100)
round(prop.table(admit.dept), 2)*100
admit1 <- as.data.frame(UCBAdmissions)
admit1
colnames(UCBAdmissions)
names(UCBAdmissions)
admit1
admit2 <- lapply(admit1, function(x)rep(x, admit1$Freq))
admit3 <- as.data.frame(admit2)
admit3
admit3 = admit3[ , -4]
admit3
admit3$Admit
admit.rows <- as.data.frame(lapply(as.data.frame(UCBAdmissions), function(x)rep(x, as.data.frame(UCBAdmissions)$Freq)))[ , -4]
str(admit.rows)
admit.rows[,3]
x1 <- scan()
?colors
colors()
col2rgb("gold2")
?palette
palette()
require(RColorBrewer)
x1
barplot(x1, col = )
install.packages("RColorBrewer")
install.packages("RColorBrewer")
x1
x1 <- scan()
x1
barplot(x1, col = "gold2") #deepskyblue1's position alphabetically
?colors
?colors
colors()
col2rgb("gold2")
?palette
palette()
x1
barplot(x1, col = )
barplot(x1, col = rainbow(6) )
install.packages("RColorBrewer")
display.brewer.pal(6, "Gold")
display.brewer.pal(6, "Gold")
display.brewer.pal(6, "Gold")
install.packages("RColorBrewer")
library(RColorBrewer)
display.brewer.pal(6, "Gold")
display.brewer.pal(6, "Greens")
greens <- brewer.pal(6, "Greens")
greens
barplot(x1, col = brewer.pal(6, "Paired"))
hot <- heat.colors(8)
hot
barplot(x1, col = hot)
light <- cm.colors(11)
barplot(x1, col = light)
rm(list =ls())
iris
iris$Petal.Length
hist(iris$Petal.Length)
hist(iris$Petal.Length,
col = "turquoise")
hist(iris$Petal.Length,
col = "turquoise",
main = "Histogram of Iris' Petal Length")
hist(iris$Petal.Length,
col = "turquoise",
main = "Histogram of Iris' Petal Length",
xlab = "Petal Length")
p_len <- hist(iris$Petal.Length,
col = "turquoise",
main = "Histogram of Iris' Petal Length",
xlab = "Petal Length")
p_len
iris
?kernel
pl <- iris$Petal.Length
hist(iris$Petal.Length,
border = 0,
col = "turquoise",
main = "Histogram of Iris' Petal Length",
xlab = "Petal Length")
hist(iris$Petal.Length,
border = 0,
breaks = 12,
col = "turquoise",
main = "Histogram of Iris' Petal Length",
xlab = "Petal Length")
hist(pl,
probability = TRUE,
border = 0,
breaks = 12,
col = "turquoise",
main = "Histogram of Iris' Petal Length",
xlab = "Petal Length")
hist(pl,
probability = TRUE,
border = 0,
breaks = 12,
col = "turquoise",
main = "Histogram of Iris' Petal Length",
xlab = "Petal Length from 3 species of Iris")
hist(pl,
probability = TRUE,
border = 0,
breaks = 12,
col = "turquoise",
main = "Histogram of Iris' Petal Length",
xlab = "Petal Lengths from 3 species of Iris")
?lines
lines(density(pl), col = "black", lwd = 3)
?rug
rug(pl, col = "gold", lwd = 2)
rug(pl, col = "gold", lwd = 1)
rug(pl, col = "gold", lwd = .5)
summary(pl)
pl <- iris$Petal.Length
summary(pl)
head(pl)
pl
pl <- as.data.frame(pl)
pl
unique(pl)
order(pl, decreasing = TRUE)
PL
pl
fivenum(pl)
pl <- iris$Petal.Length
fivenum(pl)
summary(pl)
boxplot(pl,
col = greens)
boxplot(pl,
col = "gold")
boxplot(pl,
col = "gold",
horizontal = TRUE,)
boxplot(pl,
col = "gold",
horizontal = FALSE)
boxplot(pl,
col = "gold",
horizontal = TRUE)
boxplot(pl,
col = "gold",
horizontal = TRUE,
staplety = 0)
boxplot(pl,
col = "gold",
horizontal = TRUE)
?econometrics
??econometrics
library()
search()
rm(list = search())
install.packages("ggplot2")
require("ggplot2")
update.packages()
detach("package:ggplot2", unload = TRUE)
search()
remove.packages("ggplot2")
rm(list=ls())
prop.test(50, 100)
prop.test(98, 162)
prop.test(98, 162,
alt = "greater",
conf.level = .95)
mtcars
mean(mtcars$mpg)
mean(mtcars$hp)
mean(mtcars$qsec)
sd(mtcars$mpg)
data(mtcars)
force(mtcars)
View(mtcars)
require("psych")
d <- describe(mtcars, c[1, 4, 7])
d <- psych::describe(mtcars, c[1, 4, 7])
d <- psych::describe(mtcars, c[1, 4, 7])
install.packages("psych")
install.packages("psych")
install.packages("psych")
require("psych")
d <- describe(mtcars, c[1, 4, 7])
?describe
d <- describe(mtcars[c(1, 4, 7)]
d <- describe(mtcars[c(1, 4, 7)]
d <- describe(mtcars[c(1, 4, 7)])
d
d[3, 4, 11, 12]
d[, (3, 4, 11, 12)]
d[, c(3, 4, 11, 12)]
rm(list = ls())
x1 <- c(12, 32, 43,25, NA, 53)
x1
plot(x1, col = "gold")
plot(x1, col = "darkred")
abline(plot(x1, col = "darkred"))
plot(x1, col = "darkred")
mean(x1)
x1 <- x1 != 'NA'
x1
x1 <- c(12, 32, 43,25, NA, 53)
x1
# x1 <- x1 != 'NA'
# x1
rm(NA, list = x1)
# x1 <- x1 != 'NA'
# x1
which(is.na(x1))
mean(x1, na.rm = T)
x2[is.na(x2)] <- 0
x2 <- x1
x2[is.na(x2)] <- 0
x2
x3 <- ifelse(is.na(x1), 0, x1)
x3
x1 <- c(12, 32, 43, 25, NA, 53)
x3 <- ifelse(is.na(x1), 0, x1)
x3
library(readr)
wage1000 <- read_csv("wage1000.rda")
View(wage1000)
load("~/GitHub/Data_Analysis/R_Lab/R_coding/wage1000.rda")
x <- rnorm(50)
y <- rnorm(50)
plot(sort(x), sort(y),
type = "l",
col = if(x==<1, "blue", "turquoise"))
plot(sort(x), sort(y),
type = "l",
col = if(x==1, "blue", "turquoise"))
plot(sort(x), sort(y),
type = "l",
col = if(x==1) "blue", "turquoise")
plot(sort(x), sort(y),
type = "l",
col = "turquoise")
plot(1:10,
axes = F,
ann = F)
plot(1:10,
axes = T,
ann = F)
plot(1:10,
axes = T,
ann = T)
F
F
plot(1:10,
axes = F,
ann = F)
x1 <- rnorm(50)
x2 <- rnorm(50)
plot(sort(x), sort(y),
type = "l",
col = "turquoise")
plot(1:10,
axes = F,
ann = F)
axis(2)
axis(1)
axis(3)
axis(4)
x1 <- rnorm(50)
x2 <- rnorm(50)
plot(sort(x), sort(y),
type = "l",
col = "turquoise")
plot(1:10,
axes = F,
ann = F)
axis(4)
axis(4, at seq(1, 10, by .5))
axis(3, at seq(1, 10, by .5),
labels = format(seq(1, 10, by .5), nsmall = 3))
axis(3, at seq(1, 10, by .5),
labels = format(seq(1, 10, by .5), nsmall = 3))
axis(3, at seq(1, 10, by 0.5),
labels = format(seq(1, 10, by 0.5), nsmall = 3))
axis(3, at seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 3))
axis(3, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 3))
plot(1:10,
axes = F,
ann = F)
axis(3, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
axis(1, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
axis(2, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
axis(4, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
plot(1:10,
axes = F,
ann = F,
col = "red")
axis(4, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
axis(1, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
axis(2, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
axis(3, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
plot(1:10,
axes = F,
ann = F,
col = "red",
xpd = F)
axis(3, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
axis(1, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
box()
axis(2, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
axis(4, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
mtext(paste("Side", 1:4),
side = 1:4,
line = 3.5,
font = 2)
x1 <- rnorm(50)
x2 <- rnorm(50)
plot(sort(x), sort(y),
type = "l",
col = "turquoise")
plot(1:10,
axes = F,
ann = F,
col = "red",
xpd = F)
axis(4, at = seq(1, 10, by = 0.5),
labels = format(seq(1, 10, by = 0.5), nsmall = 1))
box()
mtext(paste("Side", 1:4),
side = 1:4,
line = 3.5,
font = 2)
rm(list=ls())
install.packages('xts')
install.packages('readr')
library(xts)
install.packages('readr')
library(readr)
help(readr)
help(xts)
detach("package:xts", unload = TRUE)
detach("package:readr", unload = TRUE)
install.packages("readr")
install.packages("stringr")
mort_data = read.table("mortality_data.csv", header = TRUE, sep = ",")
mortality_data = mortality_data[(mortality_data$year >= 1993
& mortality_data$year <= 2015),]
colnames(mortality_data)[4:11] = c("col_name", "col_name", "col_name",
"col_name", "col_name",
"col_name", "col_name")
rm(list=ls())
rm(list = ls()) # clear console
setwd("~/GitHub/Data_Analysis/Mortality_and_Budget") # setwd()
install.packages('tidyverse') # if necessary
require("tidyverse")
mort_data <- read_csv("Data_sets/mortality_data.csv", col_names = TRUE)
mort_data = mort_data[(mort_data$year >= 1993
&
mort_data$year <= 2015),]
colnames(mort_data)[4:11] = c("mort_data", "prob_death", "ave_length_surv", "num_of_surv", "num_of_deaths", "num_years_lived", "num_years_left", "life_expec") # colnames(file)[index] to rename columns
mort_data # check if object is generated successfully
mort_data$tmp = stringr::str_locate(mort_data$age, "-")[ , 1]
mort_data$age2 <- stringr::str_sub(mort_data$age, 1,
mort_data$tmp-1)
mort_data$age2[mort_data$age == "0"] = "0"
View(mort_data)
"I think changing the 0's and 110+'s is better if executed soon after the creation
of age2; since I tried updating them after creating the age_group and they still
remained."
mort_data$age2[mort_data$age == "110+"] = "110"
mort_data$age2 = as.numeric(mort_data$age2)
mort_data$age_group <- cut(mort_data$age2,
breaks = c(0, 18, 64, 110),
labels = c("<18", "18-64", ">64"),
include.lowest = TRUE)
mort_data = mort_data[ , -c(3, 12, 13)]
mort_data = mort_data[ , c(1, 2, 11, 3:10)]
mort_data <- aggregate(.~ state + year + age_group,
data = mort_data,
FUN = function(x) {sum(x, na.rm = T)})
wd
?
inc_data <- read.csv("Data_sets/income_data.csv")
setwd("~/GitHub/Data_Analysis/Mortality_and_Budget/Data_sets")
inc_data <- read.csv("Data_sets/income_data.csv")
inc_data <- read.csv("Data_sets/income_data.csv")
setwd("~/GitHub/Data_Analysis/Mortality_and_Budget")
inc_data <- read.csv("Data_sets/income_data.csv")
inc_data = reshape(inc_data,
varying = names(inc_data)[2:24],
timevar = "year",
sep = ".",
direction = "long")
inc_data = inc_data[ , -4]
View(inc_data)
inc_data = inc_data[order(inc_data$state, inc_data$year), ]
View(inc_data)
setwd("~/GitHub/Data_Analysis/Mortality_and_Budget/Data_sets/education")
file_list = list.files(path = "~/GitHub/Data_Analysis/Mortality_and_Budget/Data_sets/education")
educ_data = data.frame()
View(educ_data)
for (f in 1:length(file_list)){
temp_data <- read_csv(file_list[f], col_names = TRUE)
colnames(temp_data) <- c("state", "year", "percent_highschool", "percent_college")
educ_data <- rbind(educ_data, temp_data)
}
View(educ_data)
education_0715 <- read_csv("~/GitHub/Data_Analysis/Mortality_and_Budget/Data_sets/education_0715.csv")
educ_data <- rbind(educ_data, education_0715)
View(educ_data)
colnames(educ_data) <- c('state', 'year', 'phs', 'pcoll')
View(educ_data)
rm(file_list, temp_data, f, education_0715)
setwd("~/GitHub/Data_Analysis/Mortality_and_Budget/Data_sets/expenditure")
file_list <- list.files(path = "~/GitHub/Data_Analysis/Mortality_and_Budget/Data_sets/expenditure")
expnd_data <- data.frame()
View(expnd_data)
for (f in 1:length(file_list)){
temp_data <- read_csv(file_list[f], col_names = T)
colnames(temp_data) <- c('state', 'year', 'tot_revenue',
'taxes','tot_expnd',
'education', 'public_welfare',
'hospital', 'health')
expnd_data <- rbind(expnd_data, temp_data)
}
View(temp_data)
rm(temp_data, file_list, f)
View(expnd_data)
data = merge(inc_data, educ_data, by = c('state', 'year'))
View(data)
data = merge(data, expnd_data, by = c('state', 'year'))
View(data)
data <- merge(mort_data, data, by = c('state', 'year'))
View(data)
data[ , c('pinc', 'tot_revenue', 'taxes', 'tot_expnd',
'education', 'public_welfare', 'hospital',
'health')] = data[ , c('pinc', 'tot_revenue',
'taxes', 'tot_expnd',
'education',
'public_welfare','hospital',
'health')]/10000
data[, c('phs', 'pcoll')] = data[ , c('phs', 'pcoll')]/100
setwd("~/GitHub/Data_Analysis/Mortality_and_Budget")
stargazer::stargazer(data,
type = "html",
out = 'Descriptives.doc',
title = 'Statistical Summary of Data')
# created a subset for >= 65 years-old
reg_65 <- data[data$age_group=='>64', ]
reg1 <- lm(mort_data ~ health + hospital +
log(pinc) + phs + pcoll,
data = reg_65)
View(mort_data)
View(reg_65)
reg2 <- lm(mort_data ~ health + hospital +
log(pinc) + phs + pcoll + state,
data = reg_65)
reg3 <- lm(mort_data ~ health + hospital +
log(pinc) + phs + pcoll + state + year,
data = reg_65)
stargazer::stargazer(reg1, reg2, reg3,
type = 'html',
out = 'Regressions2.doc')
View(mort_data)
rm(list=ls())
