n = 500
p_hat <- .65
confIntr <- function(p_hat, n, conf = .95)
{
se = sqrt((p_hat * (1 - p_hat))/n)
al2 = 1 - (1 - conf)/2
zstar = qnorm(al2)
ul = p_hat + zstar*se
ll = p_hat - zstar*se
return(c(ll, ul))
}
confIntr(p_hat, n)
# 6
n6 <- 913
p17 <- .54
p18 <- .53
all_2017 <- n6 * p17
all_2018 <- n6 * p18
z_score <- (all_2017 + all_2018) / (n * 2)
# 1a -- Create histogram for zip code simulation data
# p_hat = success/n
zip_data <- read.xlsx(choose.files(), 1)
library(xlsx)
# 1a -- Create histogram for zip code simulation data
# p_hat = success/n
zip_data <- read.xlsx(choose.files(), 1)
sum_num_succ <- sum(zip_data$X..Successes)
sum_num_succ/50000
sd_zip <- (.85 * .15)/50000
sd_zip
options(digits = 6)
sd_zip
options(digits = 8)
sd_zip
sd_zip <- sqrt(.85 * .15)/50000
sd_zip
se_zip <- sqrt(.84 * .16)/50000
se_zip
options(digits = 18)
se_zip
options(digits = 100)
options(digits = 22)
se_zip
867 * 4
n = 867
p_hat <- .65
confIntr <- function(p_hat, n, conf = .98)
{
se = sqrt((p_hat * (1 - p_hat))/n)
al2 = 1 - (1 - conf)/2
zstar = qnorm(al2)
ul = p_hat + zstar*se
ll = p_hat - zstar*se
return(c(ll, ul))
}
confIntr(p_hat, n)
# 5b
samp_prop <- 195/425
# 5b
p = .32
phat <- 195/425
# 5b
p = .32
phat <- 195/425
n = 425
phat <- 195/425
sd_ph <- (phat * (1 - phat)) / n
sd_ph <- sqrt((phat * (1 - phat)) / n)
sd_ph
# 5b
p = .32
n = 425
phat <- 195/425
sd_ph <- sqrt((phat * (1 - phat)) / n)
sd_ph
# 6
n6 <- 913
p17 <- .54
p18 <- .53
all_2017 <- n6 * p17
all_2018 <- n6 * p18
z_score <- (all_2017 + all_2018) / (n * 2)
z_score <- (all_2017 + all_2018) / (n6 * 2)
e_diff <- p17 - p18
var <- (p17 * (1 - p17))/n6 + (p18 * (1 - p18))/n6
var
z_score <- e_diff/var
z_s
z_s
z_score
rm(list=ls())
# 18.2
source(choose.files())
SmallVector
# 18.2
source(choose.files())
# 18.2
source("C:\\Users\\Loube\\Desktop\\smallVector.txt")
# 18.2
source("C:\\Users\\Loube\\Desktop\\smallVector.txt")
runif
runif(1000000)
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
runif(1000000)
runif(1000000)
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
mean(runif(1000000))
rbinom(500, 100, .85)
mean(rbinom(500, 100, .85))
rbinom(500, 100, .85) # 500 realizations of size 100 w/ 85% probability
# uniform(a = 0, b = 1)
runif(5)
# uniform(a = 0, b = 1)
runif(5)
# uniform(a = 0, b = 1)
runif(5)
# uniform(a = 0, b = 1)
runif(5)
# uniform(a = 0, b = 1)
set.seed(9)
runif(5)
# uniform(a = 0, b = 1)
set.seed(9)
runif(5)
x <- 1:1000
# sample( x, size, replace = FALSE, prob = NULL)
sample(7, 5, replace = TRUE)
y = c('three', 'four', 'six')
sample(y, 9, replace = T)
sample(y, 9, replace = T, prob = 1:9/32)
sample(y, 9, replace = T, prob = 1:3/32)
dnorm(70, 70, 3)
pnorm(70, 70, 3)
pnorm(70, 70, 3, lower.tail = F)
options(digits = 6)
pnorm(70, 70, 3, lower.tail = F)
# 19.1
pnorm(70, 70, 3, lower.tail = F)
4/9
12/27
4/27
4/27*3
dbinom(2, 3, 2/3)
# 19.2
dbinom(2, 3, 2/3)
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
mean(c(0,1))
mean(c(0,1))
mean(c(0,1))
mean(c(0,1))
mean(c(0,1))
mean(c(0,1))
mean(c(0,1))
mean(c(0,1))
mean(c(0,1))
mean(c(0,1))
mean(c(0,1))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
# 19.12
mean(runif(1000000))
prod
prod(2, 3)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
# 19.14
prod(rbinom(2, 3, 0.4))
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.9)
rbinom(2, 3, 0.9)
rbinom(2, 3, 0.9)
rbinom(2, 3, 0.9)
rbinom(2, 3, 0.9)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
rbinom(2, 3, 0.4)
# 19.14
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
prod(rbinom(2, 3, 0.4))
while TRUE: prod(rbinom(2, 3, 0.4))
while TRUE:
# 20.1
cars = datasets::cars
View(cars)
plot(cars$speed, cars$dist,
main = "Scatterplot of Car Speed on Distance",
col = 'Blue')
plot(cars$speed, cars$dist,
main = "Scatterplot of Car Speed on Distance",
col = 'Blue',
xlab = 'Speed',
ylab = 'Stopping Distance',
frame.plot = T)
plot(cars$speed, cars$dist,
main = "Scatterplot of Car Speed on Distance",
col = 'Blue',
xlab = 'MPH',
ylab = 'Stopping Distance',
frame.plot = T)
plot(cars$speed, cars$dist,
main = "Scatterplot of Car Speed on Distance",
col = 'Blue',
xlab = 'MPH',
ylab = 'Stopping Distance',
frame.plot = T)
plot(cars$speed, cars$dist,
main = "Scatterplot of Car Speed on Distance",
col = 'Blue',
xlab = 'MPH',
ylab = 'Stopping Distance',
frame.plot = F)
plot(cars$speed, cars$dist,
main = "Scatterplot of Car Speed on Distance",
col = 'Blue',
xlab = 'MPH',
ylab = 'Stopping Distance',
las = 1)
plot(cars$speed, cars$dist,
main = "Scatterplot of Car Speed on Distance",
col = 'Blue',
xlab = 'MPH',
ylab = 'Stopping Distance',
frame.plot = F,
las = 1)
plot(cars$speed, cars$dist,
main = "Scatterplot of Car Speed on Distance",
col = 'Red',
xlab = 'MPH',
ylab = 'Stopping Distance',
frame.plot = F,
las = 1)
plot(cars$speed, cars$dist,
main = "Scatterplot of Car Speed on Distance",
col = 'purple',
xlab = 'MPH',
ylab = 'Stopping Distance',
frame.plot = F,
las = 1)
# 20.4
islands = datasets::islands
islands
qqplot(islands)
# 20.4
datasets::islands
