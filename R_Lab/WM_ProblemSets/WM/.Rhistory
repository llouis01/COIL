plot(students)
GetEdgeLabel <- function(node) {}
label = node$name
return (label)
GetEdgeLabel <- function(node) {
label = node$name
return (label)
}
SetEdgeStyle(students, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(students, fontname = 'helvetica', label = getNodeLabel, shape = 'Diamond')
SetGraphStyle(students, rankdir = "LR")
plot(students)
GetNodeLabel <- function(node) paste0('Prob\n', node$p)
GetEdgeLabel <- function(node) {
label = node$name
return (label)
}
SetEdgeStyle(students, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(students, fontname = 'helvetica', label = getNodeLabel, shape = 'Diamond')
SetGraphStyle(students, rankdir = "LR")
GetNodeLabel <- function(node) paste0('Prob\n', node$p)
GetEdgeLabel <- function(node) {
label = node$name
return (label)
}
SetEdgeStyle(students, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(students, fontname = 'helvetica', label = getNodeLabel, shape = 'Diamond')
SetGraphStyle(students, rankdir = "LR")
GetNodeLabel <- function(node) paste0('Prob\n', node$p)
GetEdgeLabel <- function(node) {
label = node$name
return (label)
}
SetEdgeStyle(students, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(students, fontname = 'helvetica', label = getNodeLabel, shape = 'Diamond')
SetGraphStyle(students, rankdir = "LR")
GetNodeLabel <- function(node) paste0('Prob\n', node$p)
GetEdgeLabel <- function(node) {
label = node$name
return (label)
}
SetEdgeStyle(students, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(students, fontname = 'helvetica', label = getNodeLabel, shape = 'Diamond')
SetGraphStyle(students, rankdir = "LR")
GetNodeLabel <- function(node) paste0('Prob\n', node$p)
GetEdgeLabel <- function(node) {
label = node$name
return (label)
}
SetEdgeStyle(students, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(students, fontname = 'helvetica', label = getNodeLabel, shape = 'Diamond')
SetGraphStyle(students, rankdir = "LR")
GetNodeLabel <- function(node) paste0('Prob\n', node$p)
GetEdgeLabel <- function(node) {
label = node$name
return (label)
}
SetEdgeStyle(students, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(students, fontname = 'helvetica', label = getNodeLabel, shape = 'Diamond')
SetGraphStyle(students, rankdir = "LR")
GetNodeLabel <- function(node) paste0('Prob\n', node$p)
GetEdgeLabel <- function(node) {
label = node$name
return (label)
}
SetEdgeStyle(students, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(students, fontname = 'helvetica', label = getNodeLabel, shape = 'Diamond')
SetGraphStyle(students, rankdir = "LR")
GetNodeLabel <- function(node) paste0('Prob\n', node$p)
GetEdgeLabel <- function(node) {
label = node$name
return (label)
}
SetEdgeStyle(students, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(students, fontname = 'helvetica', label = getNodeLabel, shape = 'Diamond')
SetGraphStyle(students, rankdir = "LR")
SetNodeStyle(students, fontname = 'helvetica', label = GetNodeLabel, shape = 'Diamond')
SetGraphStyle(students, rankdir = "LR")
plot(students)
SetNodeStyle(students, fontname = 'helvetica', label = GetNodeLabel, shape = 'Diamond', color = 'red')
SetGraphStyle(students, rankdir = "LR")
plot(students)
students$STEM * students$STEM[1]
students$STEM * students$STEM$`Uses marijuana`
# 2b
students$STEM
students$STEM$`Uses marijuana`
# 2b
studata$Science..Technology..Engineering.and.Math[1] * studata$Science..Technology..Engineering.and.Math[2]
.19*.75
studata$Science..Technology..Engineering.and.Math[1] * .75
stem_not_use$p <- .85
sbs_uses$p <- .40
sbs_not_use$p <- .60
hu_uses$p <- .65
hu_not_use$p <- .35
bus_use$p <- .32
bus_not_use$p <- .68
print(students, "p")
# styling the tree
GetNodeLabel <- function(node) paste0('Prob\n', node$p)
GetEdgeLabel <- function(node) {
label = node$name
return (label)
}
SetEdgeStyle(students, fontname = 'helvetica', label = GetEdgeLabel)
SetNodeStyle(students, fontname = 'helvetica', label = GetNodeLabel, shape = 'Diamond', color = 'red')
SetGraphStyle(students, rankdir = "LR")
plot(students)
# 2b
studata$Science..Technology..Engineering.and.Math[1] * studata$Science..Technology..Engineering.and.Math[2]
studata$Science..Technology..Engineering.and.Math[1]
studata$Science..Technology..Engineering.and.Math[2]
studata$Social.Behavioral.Sciences[2]
studata$Arts.and.humanities[2]
studata$Business[2]
# 2b - how many uses marijuana
pct_uses <- sum(studata$Science..Technology..Engineering.and.Math[2], studata$Social.Behavioral.Sciences[2], studata$Arts.and.humanities[2], studata$Business[2] )
pct_uses
rm(pct_uses)
studata$Science..Technology..Engineering.and.Math[1]
studata$Science..Technology..Engineering.and.Math[2]
# 2b - how many uses marijuana
pct_uses <- sum((studata$Science..Technology..Engineering.and.Math[1] * studata$Science..Technology..Engineering.and.Math[2]), (studata$Social.Behavioral.Sciences[1] * studata$Social.Behavioral.Sciences[2]), (studata$Arts.and.humanities[1] * studata$Arts.and.humanities[2]), (studata$Business[1] * studata$Business[2]))
pct_uses
#2c - pctage abstainers
pct_complement = 1 - pct_uses
pct_complement
pct_uses + pct_complement
pct_uses * .28
.28 * .65
(.28 * .65) / .28
# 2d - p(uses | arts&Hu)
(studata$Arts.and.humanities[1] * hu_uses) / studata$Arts.and.humanities
# 2d - p(uses | arts&Hu)
(studata$Arts.and.humanities[1] * hu_uses) / studata$Arts.and.humanities[1]
hu_uses
hu_uses[1]
# 2d - p(uses | arts&Hu)
(studata$Arts.and.humanities[1] * .65) / studata$Arts.and.humanities[1]
.40*.65
.28 * .65
.182/.65
.40*.28
.112/.40
(.40 * .28) / .40
(.40 * .19) / .40
(.28 * .65) / .65
# 2d - p(uses | arts&Hu)
(.28 * .65) / .40
# 2d - p(uses | arts&Hu)
(pct_uses * .28) / pct_uses
# 2d - p(arts&Hu | uses )
(pct_uses * .28) / pct_uses
# 2e - p(bus | uses)
(pct_uses * .21) / pct_uses
# 2f - p(stem | uses)
(pct_uses * .19) / pct_uses
(pct_complement * .28) / pct_complement
(.59 * .19) / .59
hu_uses / pct_uses
.65 / .40
(.28 * .599) / .599
(.28 * pct_complement) / pct_complement
# 2g - p(arts&Hu | not_uses )
(.28 * pct_complement) / pct_complement
# 2h - p(sbs | not_use)
(.32 * pct_complement) / pct_complement
# 2i - p(stem | abstain)
(pct_complement * .19) / pct_complement
dfcts <- read.xlsx("C:\Users\Loube\OneDrive - William & Mary\Bus_Stats_BUAD502A\Assignments\\buad502a-m3-expert-data1-defects.xls", 1)
dfcts <- read.xlsx("C:\\Users\\Loube\\OneDrive - William & Mary\\Bus_Stats_BUAD502A\\Assignments\\buad502a-m3-expert-data1-defects.xls", 1)
dfcts
View(dfcts)
str(dfcts)
head(dfcts)
sample_space <- 0:7
nrow(dfcts)
View(dfcts)
sum(dfcts$X..Defects == 0) / (nrow(dfcts) - 1)
nrow(dfcts)
sum(dfcts$X..Defects == 0) / nrow(dfcts)
dfcts
str(dfcts)
head(dfcts)
sample_space <- 0:7
total_monitor <- nrow(dfcts)
total_monitor <- nrow(dfcts)
total_monitor
total_monitors <- nrow(dfcts)
total_monitors
prob0 <- sum(dfcts$X..Defects == 0) / total_monitors
rm(total_monitor)
prob1 <- sum(dfcts$X..Defects == 1) / total_monitors
prob2 <- sum(dfcts$X..Defects == 2) / total_monitors
prob3 <- sum(dfcts$X..Defects == 3) / total_monitors
prob4 <- sum(dfcts$X..Defects == 4) / total_monitors
prob4 <- sum(dfcts$X..Defects == 4:7) / total_monitors
sum(prob0, prob1, prob2, prob3, prob4)
dfcts$X..Defects == 4:7
dfcts$X..Defects == 4
sum(dfcts$X..Defects == 4)
dfcts[dfcts==4]
dfcts$X..Defects == 4
dfcts[dfcts==4]
sum(dfcts[dfcts==4])
sum(dfcts$X..Defects == 4:7)
sum(dfcts$X..Defects == c(4, 5, 6, 7))
sum(dfcts$X..Defects == c(4, 5, 6, 7))
dfcts[dfcts==5]
prob4 <- sum(dfcts$X..Defects == 4, dfcts$X..Defects == 5, dfcts$X..Defects == 6, dfcts$X..Defects == 7) / total_monitors
sum(prob0, prob1, prob2, prob3, prob4)
prob4_plus <- sum(dfcts$X..Defects == 4, dfcts$X..Defects == 5, dfcts$X..Defects == 6, dfcts$X..Defects == 7) / total_monitors
sum(prob0, prob1, prob2, prob3, prob4)
# 1a - calculate probability of defective monitor
sample_space <- 0:4
probs <- c(prob0, prob1, prob2, prob3, prob4)
cbind(sample_space, probs)
# 3b - expected defct/monitor
e_dfct <- sum(sample_space * probs)
e_dfct
sd(dfcts$X..Defects)
stats::deviance(dfcts$X..Defects)
# 3c - std dev fpr dfcts
dev <- (sample_space - e_dfct)^2 * probs
dev
dev
std_dev <- sqrt(sum(dev))
std_dev
e_dfct^100
sum(100 * probs)
100 * sample_space
# 3d - adding a constant to the expected value
e_dfct + 100
100_minotors <- nrow(dfcts[1:100])
100_minotors <- nrow(dfcts[c(1:100)])
# 3d - dfcts in nxt 100 monitors
monitor_100 <- nrow(dfcts[1:100])
# 3d - dfcts in nxt 100 monitors
monitor_100 <- dfcts[1:100]
dfcts[1:100]
dfcts[1]
# 3d - dfcts in nxt 100 monitors
monitor_100 <- dfcts$X..Defects[c(1:100)]
monitor_100
length(monitor_100)
monitor_100[monitor_100 == 0]
monitor_100 == 0
sum(monitor_100 == 0) / 100
prob100_0 <- sum(monitor_100 == 0) / 100
prob100_1 <- sum(monitor_100 == 1) / 100
prob100_2 <- sum(monitor_100 == 2) / 100
prob100_3 <- sum(monitor_100 == 3) / 100
prob100_4p <- sum(monitor_100 == 4, monitor_100 == 5, monitor_100 == 6, monitor_100 == 7) / 100
probs100 <- c(prob100_0, prob100_1, prob100_2, prob100_3, prob100_4p)
sum(probs100)
cbind(sample_space, probs100)
e_dfct100 <- sum(sample_space, probs100)
e_dfct100
e_dfct100 <- sum(sample_space * probs100)
e_dfct100
# 3e - std dev in next 100
dev100 <- (sample_space - e_dfct100)^2 * probs100
std_dev100 <- sqrt(sum(dev100))
std_dev100
# 3f - how many dfctive monitors from nxt 100
length(monitor_100>= 4)
monitor_100
monitor_100>4
length(monitor_100>4)
monitor_100*prob4_plus
100 * .53
prob100_4p
100 * prob100_4p
500 * .518
26 * 74.49
.01 * .45
.02 * .35
.01 8 .20
.01 * .20
.0045 + .007 + .002
# 4a - percentage of overall defctve
sum((.45 * .01), (.35 * .02), (.20 * .01))
# 4a - percentage of overall defctve
print(sum((.45 * .01), (.35 * .02), (.20 * .01)) * 100), "%")
# 4a - percentage of overall defctve
print(sum((.45 * .01), (.35 * .02), (.20 * .01)) * 100) +  "%")
# 4a - percentage of overall defctve
print(sum((.45 * .01), (.35 * .02), (.20 * .01)) * 100))
# 4a - percentage of overall defctve
sum((.45 * .01), (.35 * .02), (.20 * .01))
# 4a - percentage of overall defctve
ovrl_dfc <- sum((.45 * .01), (.35 * .02), (.20 * .01))
# 4b - conditional dfctive
(ovrl_dfc * .45) / ovrl_dfc
(ovrl_dfc * .35) / ovrl_dfc
(ovrl_dfc * .20) / ovrl_dfc
# 4c - conditional non-dfc
ovrl_non_dfc <- 1 - ovrl_dfc
(ovrl_non_dfc * .45) / ovrl_non_dfc
(ovrl_non_dfc * .45) / ovrl_non_dfc
# 4c - conditional non-dfc
ovrl_non_dfc <- 1 - ovrl_dfc
(ovrl_non_dfc * .45) / ovrl_non_dfc
(ovrl_non_dfc * .35) / ovrl_non_dfc
(ovrl_non_dfc * .20) / ovrl_non_dfc
.60 * 25
dbinom(1:25, 25, .60)
plot(dbinom(1:25, 25, .60))
15*.6
choose(25, 15)
dbinom(15, 25, .6)
dbinom
# 5a - prob that 15 are on time
dbinom(15, 25, .6)
data = read.xlsx("C:\\Users\\Loube\\OneDrive - William & Mary\\Bus_Stats_BUAD502A\\Assignments\\buad502a-m3-expert-data2-pizza-and-beer.xls", 1)
# rename columns
names(data)[c(1, 2, 3, 4, 5, 6, 7, 8)] = c("Spending Pattern", "18-24", "25-34", "35-44", "45-54", "55-64", "65+", "Total")
# declare some variables that might get repeated a lot
all_spnd_lss <- data$Total[1]
all_spnd_sme <- data$Total[2]
all_spnd_more <- data$Total[3]
total_resp <- data$Total[4]
p_rand_more <- all_spnd_more/total_resp
p_rand_more
p_lss_25 <- data$`18-24`[4]/total_resp
p_lss_25
p_lss_35_more <- ((sum(data$`18-24`[4], data$`25-34`[4])) / total_resp) * p_rand_more
p_lss_35_more
# 1d - resp < 25 OR spend more
p_lss_25_or_more <- p_lss_25 + p_rand_more - (p_lss_25 * p_rand_more)
p_lss_25_or_more
# 1e - p(35-44 | spnd_more)
p_3544_gvn_more <- ((data$`35-44`[4]/total_resp) * p_rand_more) / p_rand_more
p_3544_gvn_more
# 1f - resp 55-64 NOT spnd more
p_5564_more <- data$`55-64`[3]/data$`55-64`[4]
p_5564_NOT_more <- 1 - p_5564_more
p_5564_NOT_more
# 1g - resp > 34 spnd more
p_34plus_more <- sum(data$`35-44`[3], data$`45-54`[3], data$`55-64`[3], data$`65+`[3]) / total_resp
p_34plus_more
# 1h - resp 65+ spnds same
p_65plus_same <- data$`65+`[2]/total_resp
p_65plus_same
plot(students)
pct_uses
pct_complement
# 2d - p(arts&Hu | uses )
(pct_uses * .28) / pct_uses
# 2e - p(bus | uses)
(pct_uses * .21) / pct_uses
# 2g - p(arts&Hu | not_uses )
(.28 * pct_complement) / pct_complement
cbind(sample_space, probs)
e_dfct
std_dev
e_dfct100
std_dev100
# 4a - percentage of overall defctve
ovrl_dfc <- sum((.45 * .01), (.35 * .02), (.20 * .01))
(ovrl_dfc * .45) / ovrl_dfc
(ovrl_dfc * .35) / ovrl_dfc
(ovrl_dfc * .20) / ovrl_dfc
(ovrl_non_dfc * .45) / ovrl_non_dfc
(ovrl_non_dfc * .35) / ovrl_non_dfc
(ovrl_non_dfc * .20) / ovrl_non_dfc
dbinom(15, 25, .6)
rm(list-ls())
rm(list=ls())
qqnorm(c(2, 3,4,5,6))
#### September 20th
x = sample(rep(c(1:100), 2)
#### September 20th
x = sample(rep(c(1:100), 2))
#### September 20th
x = sample(rep(c(1:100), 2))
qqnorm(x)
#### September 20th
x = c(360, 348, 12)
qqnorm(x)
356*30
20680 * 24
x <- list('gnu', c(3:7), months = month.abb)
x
x[[4]][3]
x[[3]][4]
x <- list('gnu', c(3:7), months = month.abb)
x
x[[3]][4]
x <- list('gnu', c(3:7), month.abb)
x
x <- list('gnu', c(3:7), months = month.abb)
x
x[[3]][4]
x$months[4]
x <- list('gnu', c(3:7), months = month.abb)
x
x$months[4]
creatures = c("Dogs, Cats", "Armadillo", "Human")
creatures = c("dog", "cat", "armadillo", "human")
friendly = c(TRUE, TRUE, FALSE, TRUE)
diet = c("cats", "mice", "termites", "twinkies(tm)")
waking.hours = c(13.9, 11.5, 5.9, 16.0)
creature.data = data.frame(row.names = creatures,
friendly, diet, waking.hours)
View(creature.data)
creatures[1]
creatures[1]$[1]
z = sample(c(-1:10))
z
a = data.frame(z)
a
a = data.frame(1, 2, 3, 4,
row.names = c('a', 'b', 'c', 'd'))
a = data.frame('1' = c(1:3), '2' = c(-1:1), '3' = c(3:9), '4' = c(-1, -1),
row.names = c('a', 'b', 'c', 'd'))
z = sample(c(-1:4))
y = sample(c(-2:2))
p = sample(c(2:4))
t = sample(c(-1:1))
a = data.frame(z, y, p, t)
z = c(-1:1)
y = c(-2:0)
p = c(2:4)
t = c(-1:1)
a = data.frame(z, y, p, t)
a
z = c(-1:2)
y = c(2:5)
p = c(2:5)
t = c(-1:2)
a = data.frame(z, y, p, t)
a
p = c(2:-1)
t = c(-1:2)
a = data.frame(z, y, p, t)
a
a[a<0]
gsub('NA', -1, a )
replace(a, 'NA', -1)
replace(a, 'NA')
ifelse(a<0, 'NA', a)
ifelse(a<0, 'NA')
ifelse
replace(a, a[a<0], 'NA')
a
replace(a, a<0, 'NA')
a_new = replace(a, a<0, 'NA')
a_new
a
a_new = replace(a, a<0, 'NA')
a_new
a_new
z = c(-1:2)
y = c(2:5)
p = c(2:-1)
a = data.frame(z, y, p)
a
a_new = replace(a, a<0, 'NA')
a_new
# cars mean stopping distance
cars
mean(cars[, 2])
cars[2]
# cars mean stopping distance
cars
mean(cars[, 2])
print("The average stopping distance is ", mean(cars[, 2]))
print("The average stopping distance is "+ mean(cars[, 2]))
# cars mean stopping distance
cars
mean(cars[, 2])
cars
cars[speed/2==0]
cars = cars
cars
View(cars)
cars$speed[cars$speed/2==0]
cars$speed
cars$speed/2 == 0
cars$speed%%2 == 0
cars$speed[cars$speed%%2==0]
cars[cars$speed%%2==0]
cars$speed
cars
View(cars)
cars[cars$speed%%2==0]
cars$speed[cars$speed%%2==0]
row.names(cars$speed[cars$speed%%2==0])
View(x)
row.names(cars$speed[cars$speed%%2==0])
col(cars$speed[cars$speed%%2==0])
col(cars)
cars$speed[cars$speed%%2==0]
sample.int(3)
sample(cars, 10)
sample(cars, 10, T)
sample_n(cars)
cars(which(cars$speed%%2==0))
cars[which(cars$speed%%2==0)]
subset(cars[cars$speed%%2==0])
subset(cars$speed[cars$speed%%2==0])
subset(cars, cars$speed%%2==0, select = c('speed', 'dist'))
even_speed_cars = subset(cars, cars$speed%%2==0, select = c('speed', 'dist'))
cars = cars
cars
cars$speed
cars$speed[cars$speed%%2==0]
even_speed_cars = subset(cars, cars$speed%%2==0, select = c('speed', 'dist'))
even_speed_cars
View(cars)
