# 4h
# H0: ybar_c1 = ybar_c2
# Ha: ybar_c1 =/= ybar_c2
tstat <- ybar_cc / se_cc
# 5
# H0: mu_c1 = mu_c2
t.test(c1, c2, alternative = "two.sided")
df_wines <- ((c1_var/c1_n + c2_var/c2_n)^2) / (((c1_var/c1_n)^2 / (c1_n - 1))  + ((c2_var/c2_n)^2 / (c2_n-1))) # verify df
p_value <- 2 * pt(tstat, c1_n + c2_n - 2, lower = F)
p_value2 <- 2* pt(tstat, min(c1_n - 1, c2_n - 2), lower = F)
# the p-value which uses the lower degrees of freedom is more conser
# At alpha 0.05, I fail to reject the null hypothesis stating that the mean ages in both cellars are equal #
#### Welch Two Sample t-test ####
# data:  c1 and c2
# t = 0.25322, df = 109.44, p-value = 0.8006
# alternative hypothesis: true difference in means is not equal to 0
# 95 percent confidence interval:
#   -3.067627  3.966328
# sample estimates:
#   mean of x mean of y
# 21.48571  21.03636
# 6a
tstar <- abs(qt(0.05/2, df_wines))
ll = ybar_cc - (tstar * se_cc)
ul = ybar_cc + (tstar * se_cc)
print(paste("Confidence Interval: (",
round(ll, 2), ", ",
round(ul, 2), ")"))
t.test(c1, c2, alternative = 'two.sided', var.equal = T)
pooled_var <- ((c1_n - 1)*c1_var + (c2_n - 1)*c2_var) / ((c1_n - 1) + (c2_n - 1))
pooled_se <- sqrt(pooled_var/c1_n + pooled_var/c2_n)
df <- c1_n + c2_n - 2
tstat2 <- ybar_cc / pooled_se
p_value3 <- 2 * pt(tstat2, df, lower = F)
tstar2 <- abs(qt(0.05/2, df))
ll2 = ybar_cc - (tstar2 * pooled_se)
ul2 = ybar_cc + (tstar * pooled_se)
print(paste("Confidence Interval: (",
round(ll2, 2), ", ",
round(ul2, 2), ")"))
# 7
# import data set
glo_data <- read.xlsx("C:\\Users\\Loube\\OneDrive - William & Mary\\Bus_Stats_BUAD502A\\Assignments\\buad502a-m6-expert-dataset-blooms.xls", 1)
glo_n = nrow(glo_data)
glow_with = glo_data$With.Fertilizer
glo_wout = glo_data$Without.Fertilizer
# same flower variety, different individual, receiving or not receiving
hist(glo_data$With.Fertilizer)
hist(glo_data$Without.Fertilizer)
# create diff column for comparison
glo_data$Diff <- glo_data$With.Fertilizer - glo_data$Without.Fertilizer
# mean difference
mean_diff <- mean(glo_data$Diff)
# sd of diff
sd_diff <- sd(glo_data$Diff)
# se of mean diff
se_dbar = sd_diff / sqrt(glo_n)
# t-test
t.test(glow_with, glo_wout, alternative = 'greater', paired = T)
#tstat
glo_tstat <- mean_diff / se_dbar
glo_df <- glo_n - 1
# one-sided; > 0
# p-value
glo_pval <- pt(glo_tstat, glo_df, lower = FALSE) # one-sided
rm(list_ls())
rm(list=ls())
my_cars = cars
if (my_cars$speed > 20) print(my_cars$speed)
if (my_cars$speed > 20) print(my_cars$speed)
if (my_cars$speed > 20) print(my_cars)
my_cars$speed
my_cars$speed > 20
if (my_cars$speed > 15) print(my_cars[my_cars$speed > 15])
if (my_cars$speed > 15) print(c(my_cars$speed))
if (c(my_cars$speed) > 15) print(c(my_cars$speed))
if (c(my_cars$speed > 15) print(c(my_cars$speed))
if (c(my_cars$speed > 15)) print(c(my_cars$speed))
if (c(my_cars$speed > 15)) print(my_cars$speed)
for speed in my_cars:
if (speed > 15) print(speed)
for my_cars$speed in my_cars:
if (speed > 15) print(speed)
for my_cars$speed in my_cars:
if (my_cars$speed > 15) print(speed)
for my_cars$speed in my_cars:
if (my_cars$speed > 15) print(speed)
for speed in my_cars$speed:
if (my_cars$speed > 15) print(speed)
leapyear = function(year) {
# if year divisible by 4 but not by 100 and divisble by 400
if (year %% 4 == 0 && year %% 100 != 0 || year %% 400 == 0)
return(TRUE)
else
return(FALSE)
}
leapyear(2021)
leapyear(2022)
leapyear(2023)
leapyear(2024)
paste(c(2, 3, 4, "76"))
paste('cat', 'dog')
substring('cat')
substring('cat', 1:nchar('cat'), 1:nchar('cat'))
rev(substring('cat', 1:nchar('cat'), 1:nchar('cat')))
strRev = function(x) {
paste(rev(substring(x, 1:nchar(x), 1:nchar(x))))
}
strRev('Anna')
strRev('anna')
is.palin = function(x){
if (mode(x) != 'character') stop('Non-character Input')
if (x == strRev(x)) print('It\'s a palindrome') else return(FALSE)
}
in.palin("DOD")
is.palin("DOD")
strRev = function(x) {
paste(rev(substring(x, 1:nchar(x), 1:nchar(x))), collapse = "")
}
is.palin = function(x){
if (mode(x) != 'character') stop('Non-character Input')
if (x == strRev(x)) print('It\'s a palindrome') else return(FALSE)
}
is.palin("Anna")
strRev("anna")
x = []
x
describe = function(x){
n = length(x)
if (n == 1) cat("The vector has 1 element.\n")
else        cat("The vector has ", n, "elements.\n")
}
describe('9384756')
describe(1:13)
describe(c(3, 5, 4, 'uty'))
while (T) print("hello")
catalan = function(n) {
if (n < 0) stop("non-negative input only")
cat_n = ((factorial(2*n)) / (factorial(n + 1) * factorial(n)))
}
catalan(10)
View(catalan)
View(describe)
View(catalan)
View(describe)
View(catalan)
catalan(10)
return(cat_n)
catalan = function(n) {
if (n < 0) stop("non-negative input only")
cat_n = ((factorial(2*n)) / (factorial(n + 1) * factorial(n)))
return(cat_n)
}
catalan(10)
factorial(2*n) / (factorial(n) * factorial(n + 1))
n = 10
catalan(10)
factorial(2*n) / (factorial(n) * factorial(n + 1))
j = 10
# fib
fib[1] = 1
# fib
fib = numeric(10)
fib[1] = 1
fib[2] = 1
i = 3
fib = numeric(10)
fib[1] = 1
fib[2] = 1
i = 3
j = 10
while (i <= 10) {
fib[i] = fib[i - 1] + fib[i -2]
i = i + 1
}
fib
print(x * 2)
for i in range(10) {
print(i * 2)
}
fib = rep( 1, 10)
for (i in 3:10) {
fib[i] = fib[i - 1] + fib[i - 2]
}
fib
# sieve of eratosthenes
prime = [prime * 10]
# sieve of eratosthenes
prime = [FALSE * 10]
fact1 = function(x) {
if (x<0) stop('non-negative input')
i = 1
for (j in 2:x) i = i * j
return(i)
}
fact(5)
fact1(5)
fact1(-9)
fib = function(x) {
if (x<0) stop('non-negative input only')
return(fib(x - 1) + fib(x - 2))
}
fib(12)
fib = function(x) {
if (x<0) stop('non-negative input only')
else return(fib(x - 1) + fib(x - 2))
}
fib(12)
fib = function(x) {
if (x<0) stop('non-negative input only')
else
return(fib(x - 1) + fib(x - 2))
}
fib(12)
fib = function(x) {
if (x<0) stop('non-negative input only')
return(fib(x - 1) + fib(x - 2))
}
fib(12)
fib = function(x) {
return(fib(x - 1) + fib(x - 2))
}
fib(12)
fib(5)
fib_num = function(x){
return((x-1) + (x - 2))
}
fib_num(12)
fib_num = function(n){
fib = numeric(n)
fib[1] = 1
fib[2] = 1
return(fib[n-1] + fib[n-2])
}
fib_num(12)
fib
fib
fib_num = function(n){
fib = numeric(n)
fib[1] = 1
fib[2] = 1
return(fib[n-1] + fib[n-2])
}
fib_num(12)
fib
fib = rep( 1, 10)
for (i in 3:10) {
fib[i] = fib[i - 1] + fib[i - 2]
}
fib
n = 12
fib = rep( 1, 12)
for (i in 3:n) {
fib[i] = fib[i - 1] + fib[i - 2]
}
fib
fib_num <- function(x) {
fib = rep( 1, 12)
for (i in 3:n) {
fib[i] = fib[i - 1] + fib[i - 2]
}
}
n = 113
fib_num <- function(x) {
fib = rep( 1, 12)
for (i in 3:n) {
fib[i] = fib[i - 1] + fib[i - 2]
}
}
fib_num(n)
fib_num <- function(x) {
fib = rep( 1, 12)
for (i in 3:n) {
fib[i] = fib[i - 1] + fib[i - 2]
return(fib_num[i])
}
}
fib_num(n)
fib_num <- function(x) {
fib = rep( 1, 12)
for (i in 3:n) {
fib[i] = fib[i - 1] + fib[i - 2]
return(fib[i])
}
}
fib_num(n)
fib_num <- function(x) {
fib = rep( 1, n)
for (i in 3:n) {
fib[i] = fib[i - 1] + fib[i - 2]
return(fib[i])
}
}
fib_num(n)
n = 113
fib_num <- function(x) {
fib = rep( 1, n)
for (i in 3:n) {
fib[i] = fib[i - 1] + fib[i - 2]
return(fib[i])
}
}
fib_num(n)
View(fib_num)
checkerboard
for (x in 1:8){
for (y in 1:8)
polygon(c(0, 0, 1, 1), c(0, 1, 1, 0), col = 'red')
}
for (x in 1:8){
for (y in 1:8)
plot(polygon(c(0, 0, 1, 1), c(0, 1, 1, 0), col = 'red'))
}
for (x in 1:8){
for (y in 1:8)
plot()
polygon(c(0, 0, 1, 1), c(0, 1, 1, 0), col = 'red')
}
for (x in 1:8){
for (y in 1:8)
plot(0,0)
polygon(c(0, 0, 1, 1), c(0, 1, 1, 0), col = 'red')
}
for (x in 1:8){
for (y in 1:8)
plot(0,0, xlim=c(0,8), ylim=c(0,8))
polygon(c(0, 0, 1, 1), c(0, 1, 1, 0), col = 'red')
}
for (x in 1:8){
for (y in 1:8)
plot(0,0, xlim=c(0,8), ylim=c(0,8), axes=F)
polygon(c(0, 0, 1, 1), c(0, 1, 1, 0), col = 'red')
}
for (x in 1:8){
for (y in 1:8){
plot(0,0, xlim=c(0,8), ylim=c(0,8), axes=F)
polygon(c(0, 0, 1, 1), c(0, 1, 1, 0), col = 'red')
}
}
rpois
# sieve of eratosthenes
prime =
### Module 6
# Exercise 22.3
n = 10
factorial(2*n) / (factorial(n) * factorial(n + 1))
n = 1000000
x <- rpois(n, 3) + rpois(n, 5)
x
for (x in 1:8){
for (y in 1:8){
plot(0,0, xlim=c(0,8), ylim=c(0,8), axes=F)
polygon(c(0, 0, 1, 1), c(0, 1, 1, 0), col = 'red')
}
}
for (x in 1:8){
for (y in 1:8){
plot(0,0, xlim=c(0,8), ylim=c(0,8), axes=F, ylab = "", xlab = "")
polygon(c(0, 0, 1, 1), c(0, 1, 1, 0), col = 'red')
}
}
n = 10
((1/n+1) * choose(2*n, n))
((1/n+1) * choose(n, 2*n))
n = 10
((1/n+1) * choose(n, 2*n))
((1/n+1) * choose(2*n, n))
(factorial(1/n+1) * choose(2*n, n))
((1/n+1) * choose(2*n, n))
n = 10
choose(2*n, n) / (n + 1)
i = 2
while (i < n) prod((n + i) / i)
while (i < n) return prod((n + i) / i)
while (i < n) print prod((n + i) / i)
while (i < n) print prod((n + i) / i, (n + i) / i)
while (i < n) print prod((n + i) / i, (n + i) / i)
i = i + 1
n = 10
i = 2
prod((n + i) / i, (n + i) / i)
n = 10
i = c(2:n)
prod((n + i) / i, (n + i) / i)
n = 10
i = 2
prod((n + i) / i, (n + i) / i) i = i + 1
n = 10
i = 2
prod((n + i) / i, (n + i) / i), i = i + 1
prod
n = 10
i = 2
prod((n + i) / i, (n + i) / i)
factorial(prod((n + i) / i, (n + i) / i))
prod((n + i) / i, (n + i) / i)
i = 2:n
prod((n + i) / i, (n + i) / i)
Fib = function(n) {
if (n == 1) return(1)
if (n == 0) return(0)
Fib[i] = 3
return(Fib(n -1) + Fib(n -2))
}
Fib(3)
Fib = function(n) {
fib = rep(1, n)
if (n == 1) return(1)
if (n == 0) return(0)
fib[i] = 3
return(Fib(n -1) + Fib(n -2))
}
Fib(3)
Fib = function(n) {
i = rep(1, n)
if (n == 1) return(1)
if (n == 0) return(0)
fib[i] = 3
return(Fib(n -1) + Fib(n -2))
}
Fib(3)
Fib = function(n) {
i = rep(1, n)
if (n == 1) return(1)
if (n == 0) return(0)
i[3] = 3
return(Fib(n -1) + Fib(n -2))
}
Fib(3)
Fib(4)
Fib(5)
Fib(6)
Fib = function(n) {
i = rep(1, n)
if (n == 1) return(1)
if (n == 0) return(0)
i[3] = 3
return(Fib(n -1) + Fib(n -2))
}
Fib(6)
Fib = function(n) {
if (n < 0) stop('non-negative input')
i = rep(1, n)
if (n == 1) return(1)
if (n == 0) return(0)
i[3] = 3
return(Fib(n -1) + Fib(n -2))
}
Fib(6)
Fib(2)
# 24.2
Fib = function(n) {
if (n < 0) stop('non-negative input')
i = rep(1, n)
if (n == 1) return(1)
if (n == 0) return(0)
i[3] = 3
return(Fib(n -1) + Fib(n -2))
}
Fib(2)
i
for (x in 1:8){
for (y in 1:8){
plot(0,0, xlim=c(0,8), ylim=c(0,8), axes=F, ylab = "", xlab = "")
polygon(c(0, 0, 1, 1), c(0, 1, 1, 0), col = 'red')
}
}
n = 10
i = 2
((n + i) / i) * n
rm(list=ls())
library(xlsx)
casi <- read.xlsx("C:\\Users\\Loube\OneDrive - William & Mary\\Bus_Stats_BUAD502A\\Assignments\\buad502a-m7-novice-dataset3-casino.xls", 1)
casi <- read.xlsx("C:\\Users\\Loube\\OneDrive - William & Mary\\Bus_Stats_BUAD502A\\Assignments\\buad502a-m7-novice-dataset3-casino.xls", 1)
View(casi)
plot(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away.)
line(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away., col = 'red')
line(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away.)
abline(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away.)
plot(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away.)
abline(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away.)
plot(lm(casi$Casino.Revenue.in..1.000.000.s~casi$Casino.Revenue.in..1.000.000.s))
casi_lm <- lm(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away.)
View(casi_lm)
casi
casi[-1]
casi[1]
casi[, -3]
casi[, -4]
casi <- casi[, -4]
plot(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away.)
abline(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away.)
casi_lm <- lm(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away.)
summary(casi_lm)
par(mfrow=c(2,2))
plot(casi_lm)
par(mfrow=c(1,1))
plot(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away.)
abline(casi_lm, cex = 1.3)
plot(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away., col = 'red')
abline(casi_lm, cex = 1.3)
casi_lm <- lm(casi$Casino.Revenue.in..1.000.000.s~casi$Number.of.free..5.poker.chips.given.away.)
summary(casi_lm)
coef(casi_lm)
slope <- casi_lm[2]
slope
View(slope)
slope <- coef(casi_lm[2])
View(slope)
coef(casi_lm[1]) # obtain coefficient
coef(casi_lm[2]) # obtain coefficient
coef(casi_lm) # obtain coefficient
